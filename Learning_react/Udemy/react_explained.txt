React Component

name component ->return-> JSX
produces jsx		   set of instruction that tell what to show
and handles
user event

JSX Element
-tell react to create a normal html element
-tell react  to show another react component

project directory
-src : folder where we put all source code we write (js, ts, jsx)
-public : folder that stores static files, like images, and maybe another html
-node_modules : Folder that contatin all our project installed dependeces; npm packages
-package.json: records our project dependencies
-package-lock(yarn.lock) records the exact version of the packages that we installed.
-readme it's a readme


React Notes
-a react compenten can be a class or a functional(yay Functional Programming)
JSX Project
-src
	- Only index.js
		import ReactDOM from 'react-dom'
			reacdom can be any name
			
JSX vs HTML
	-adding custom styling is with different styling
		- you nee to add {{ }} two curly brace
			-the first { javascript var
			- the second { is fot js object that i learned in freecodecamp
				- this are the properties
				- i learned that
		- any styling uses cammelCase convention
		-also no ""
		-so props goes like this
			-border : '1px solid red'
			-because props is a var or a primitive
			- in this case we use strings
	-class in html is different in jsx
		-instead of class use className
		-because class is already taken in js
	- You can reference js variable in jsx
		-with {}
		
		- Limitations:
			-with objects you need to use the key
			-you cant show the whole obj as a html attribute
			
JSX this is just a convention
	- all string are in double quotes
	- non jsx use single quotes
	
Reactt Philosphy
- Nesting
- Reusability
- Configuration
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">



Creating Reusable Configurable Component
- Indetify the replicate jsx
- create a name
- create a new file for the component
- In the new file create the new component by copy pasting	


React Props
- Passing data from parent component to child component
- Customize or configure the child
- you cannot pass data from child to parent

to pass down property from the parent:
<Compenent propname = {var} />
<Compenent propname = literal />

in the component the first arguments are the props
const Component = (props) => {}

Functional Components vs Class Components
- FP Components produces jsx to show content to the user
- Class compoents can also produce jsx to show content to the user
- Class can use the lifecycle
- class can use the state system to update content on screen live

Functional Component with Hooks
- Can produce jsx
- can use hooks to run code at specific points in the lyfecle
- can use hooks to acces state system and update content on screen


Life Cycle in Seasons App
- JS file loaded into the broweser (pre calc)
- App component get created
- App component contructo function get called
- state object is created and assigned this.state propertie
- we call geolocations service
- React Calls the compenten render method 
- App retuns jsx gets rendered as HTML
- We get the reusult of geolocation
- We update our state object with a call to this.setstate
- React sees the change 
- react call out render method again
- render mehtos returns the some part of the jsx updated
- react take that jsx and updates content on screen


Class Components
- Must be  javscript class
- Must Extend from React.Component
- Must define a rende method the returns jsx

Rules Of State in React 
- Only Usable with class components (unless we use HOOK!)
- Dont confuse props with state
- State is a JS object that containts data relevant to a component
- Updating 'state' on a componente causes the component to (almost) instantly render
- State must be initialized when a compoenent is created
- setState is the only way to update the 

	
Handling Errors in a React Project
- Dont just console.log the error show to the user what was the error


Component LifeCycle
- Constructor
	- Good Place to do intial one time setup
		- Perfect place to intialiaze state objects
- render : content visible on screen
	- only use it to return jsx
- componentDidMount : sit and wait for updates only run once
	- good place to do data loading
	- this get executed only one time
- componentDidUpdate : sit and wait until this component is not longer shown
	- good place to do mote data loading when state or props changes
- componentWillUnmount
	- good place to do clean up(especially for non react stuff)
	
-Others
	- shouldComponentUpdate
	- getDerivedStateFromProps
	- getSnapshotBeforUpdate
	

Class Components
- Intializing states
	- The first simple way is to just put in yout constructor
		- this.state = {key:val, key2 : val}
- Remember in class components that are like objects in react we have specific functions
	that map to specific lifecycle methods
	
- The only mandatory function needed in a class components is render
	
	
- In JS months (new Date().getMonth()) is 0 indexed. Jan = 0;


JS Tricks config object
Use a js object for configuration of React components
const seasonConfig = {
	summer: {
		text: "Let's Hit The Beach",
		iconName: 'Sun',
	},
	winter: {
		text: "Burr, It's Chilly",
		iconName: 'snowflake',
	},
};


What Happens when importing CSS in react
- Thanks To WebPack
	-It takes the css and puts it in the index.html


Default Props
Spinner.defaultProps = {
	message : "Loading..."
}
- Default Values when we don't pass the props to the children, avoid using {props.something|| default value}

Avoid Conditional Render
- To avoid condtional rendering move the logic to a helper function and call it in the 
render function

Season Project Finale
- Remember with class we use this.state.something not, this.something; it's not props it's state



------------------------- Section 7 ------------------------------------

Event Handlers
- Obviously when we pass a function for onChange we pass the reference of the function
using this if we are inside a class component
	- onChange={this.onInputchange} // this formar since it's jsx	
- When we pass the function we pass an argument usually called event
	- onInputchange(event)
	
- You can pass arrow functions as event handlers
	onChange = {(event)=> {do something;	}}
		- we use this for a single line of code
		
Controlled vs Uncontrolled Elements
	- Controlled Flow
		- User types input
		- callback get's invoked
		- we call setState with the new value
		- Component rerenders
		- Input is told what its value is (coming from state)
setState is like an asynchronous fucntion or a request
- So if you call console.log after a setState; it will not be the updated value;
- that's why setState has a callback function available for user.

Default Form and input Behaviour
- Pressing Enter on a input select element, submits the form.
- Submiting a form refreshed the page

Problems with This
- We all know that this is a keyword that references the instantiated class
- How does js figures out this
	- this comes not from the class, but from where the function was called.
		-this means left from the dot
	- SOLUTIONS
		class Car{
		 	constructor(){
		    this.drive = this.drive.bind(this);
		  }
		  setDriveSound(sound){
		    this.sound = sound;
		  }
		  drive(){
		    return this.sound;
		  }
		}


		const car = new Car();

		car.setDriveSound('ale')
		car.drive();

		const truck = {
		  sound: "truck",
		  driveT : car.drive
		}

		const drive = car.drive
		drive()
- On Class components props is inside this


-Await is only blocking inside the function; if you call two async functions then it will not be blocking 
	function al(){
		thisAsyncFunc();
		thisAsyncfunct2(); 
		the first one to finished will be executed
	}

You can return an array of htlm tags as an valid jsx


Keys in List
- Add prop key in html tag to the root element of the list

Ref Sysystem
- React Ref gives acces to a single DOM element
- We create refs in the constructor, assign them to instance variables, then pass to a particular
jsx element as a props
- There is no need to link it to a state of the class, because it doesnt change overtime once is set
- Ref system is the only way to acces the dom elements, since the tags in JSX are JSX not html/dom elemnts
- The Console Log Problem
	-Remember that the img uses src; so it will fetch the image; by the time it get the image; the console log already ran.
	-thats why when re-rendering, the console logs again but with the images loaded.
-this.someRef.addEventListener('load',callback) is the same as <someTag onLoad={callback} />

when key and value are the same you can just use the var_name
		this.setState({ spans: spans }) == this.setState({ spans });

If in a callback or evente handler i pass the function with func() and not like func; it will obviously excuted the moment is rendered and not when the event is triggered


--------------------------------------------- Section 11 -------------------------------------------

Hooks System
- useState
	-let me use state in a functional way like when we use setState
- useEffect
	- This is to do something similiar like lifecycle methods e.g componentDidMount
- useRef
	- create Ref in a functional component
	

Primitive Hooks
- useState
- useReducer
- useRef
- useDebugValue
- useEffect
- useCallback
- useImperativeHandle
- useContext
- useMemo
- useLayoutEffect

Custom Hooks	
 
Always think where state should live, in which component


Separate constant variable that dont change from the state like variable in react


Sometime you UI framework could have problems with surrounding divs so use React.fragments

- When to search
	When state has updated and compenent renredered to give time to know when the user finished typing
	
useEffect 
- Allow Function components to use somothing similar to lifecycle methods
- we configure the hook to run somecode, a callback. in on of the 3 scenarios
	1 When the component is rendered the first time only
		[]
	2 when the componenent is rendered the firstime and after it re-renders
		... nothing ...
	3 When the compoenete is rendered for the first time OR (after it re-renders and after some piece of data(state) [anY, OF, this,will,count])
		[data]
Remember what you learned in FreeCodeCamp: how to immediatly call an arrow function IIFE

NO-RETURN_AWAIT
and asycn function cannot return a value only a promise

Destructre nested object is from left to right with the keys on the left

Throttling API Request
- Input change => startSetTimeout
- Input CHnage => cancel Prevous SetTimeout; staet another timeout
- setTimeout finished => make a request
-input change => startSetTimeout

USEEFFECT ALWAYS RUN ON UBMMOUNT even on the one use only initial useEffect


useEffect CleanUp functions
- useEffect can return nothing or a cleanup function
- When does it call the clenup function
	- It will not call it on intial re-render; so with [], it will never be called only on unmount
	- This includes unmount
	- When the targeted variables changes it will cleanup
	- or if you specify nothing; in each rerender
- All the variables above the function still existe; the useffect has been called; so local var are still the same a before

useffect [varible] HOW to check if initial render

- useEffect only with props and state, also dependencies aray warning
- Hook Missing Dependencies
	- If you use a dependencie like [term]  or [] and use another prop or state inside it you will have a problem

- Be careful with just adding another value to dependency it coul cause a infinite call to useEfect

Debouncing to FIX useEffect dependeciy matrix
- TO fix this in the app instead of depending of another state for the useEffect; inderectly nest to useEffect
- one to update the next state; and the other useffect will be no need to know if it's the first time or not
when updating state if it's the same value then it woul not count as changing the state
	
- In ReactJS you can passdown the setVar() (the setter), from useState, down to another child, you cannot do that with class-based components since you will have problems with this.
		-Renders go from top to bottom and mounts from bottom to top.
		
- HTML jsx tags cannot liste to events from its parent only from its children
- IN HTML event handler go up from the trigered chidren to all it's predecesors(parents)
	- so if a parent div has a onclick it will be activted by it's children onclick
	
Manual Event Listener
	- When you reference directly the html: like document.body.addEventListener('click', ()=> console.log("Hola"));
	- First the dom, the the react ones get called if you do it manually
	- the eventlistener will still live in wherever you put it
	
useRef
	- to connect a useRef varialbe put it inside a ref html tag likeso <div ref = {usrefvar}>
	- ref has a functions contains to know ref.current is the parent of another element
	


